@using JustAMessenger.Models
@using Microsoft.AspNet.Identity
@{
    ViewBag.Title = "Мессенджер";
    var userName = User.Identity.Name;
    var userId = User.Identity.GetUserId();
}
<div class="main-container">
    <aside class="aside" id="aside-menu">
        <h4>Список контактов</h4>
        <ul id="contact-list">
        </ul>
        <br/>
        <input type="button" id="add-contact" value="Добавить в список контактов..."/>
        <h4>Ожидают подтверждения</h4>
        <ul id="add-confirmations">
        </ul>

    </aside>
    <main class="main" role="main">
        <h3>Сообщения</h3>
        <ul id="discussion">
        </ul>
        <div class="container" id="chat-controls">
            <input type="text" id="message" placeholder="Напишите сообщение..." />
            <input type="button" id="sendmessage" value="Отправить" />
            <input type="hidden" id="displayname" />
        </div>
    </main>
</div>
    @section scripts {
        <!--Script references. -->
        <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
        <!--Reference the SignalR library. -->
        <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
        <!--Reference the autogenerated SignalR hub script. -->
        <script src="~/signalr/hubs"></script>
        <!--SignalR script to update the chat page and send messages.-->
        <script>
            $(function() {
                var currentUserId = '@userId';
                var currentUserName = '@userName';
                var currentContactId;
                // Reference the auto-generated proxy for the hub.
                var chat = $.connection.chatHub;
                // Create a function that the hub can call back to display messages.
                chat.client.addNewMessageToPage = function(message) {
                    // Add the message to the page.
                    var className = message.SenderId === currentUserId ? "message-own" : "";
                    $("#discussion").append(`<li class="message ${className}"><p class="message-header">${message.SenderName}</p>` +
                        `<p class="message-text">${message.Text}</p>` +
                        `<p class="message-date">${new Date(message.Timestamp).toLocaleString('ru-RU')}</li>`);
                    var messageElements = document.querySelectorAll(".message");
                    messageElements[messageElements.length - 1].scrollIntoView();

                };

                chat.client.printMessages = function(messages) {
                    $("#discussion").empty();
                    messages.forEach(m => {
                        var className = m.SenderId === currentUserId ? "message-own" : "";
                        $("#discussion").append(`<li class="message ${className}"><p class="message-header">${m.SenderName}</p>` +
                            `<p class="message-text">${m.Text}</p>` +
                            `<p class="message-date">${new Date(m.Timestamp).toLocaleString('ru-RU')}</li>`);
                    });

                    var messageElements = document.querySelectorAll(".message");
                    messageElements[messageElements.length - 1].scrollIntoView();
                }

                chat.client.printContacts = function(contacts) {
                    $("#contact-list").empty();
                    contacts.forEach(c => {
                        $("#contact-list").append(`<li class="contact-list-item" id="${c.Id}">${c.Name}</li>`);
                    });
                    document.querySelectorAll('.contact-list-item').forEach(e => e.addEventListener('click', changeCurrentContact));
                }

                chat.client.printRequests = function(requests) {
                    $("#add-confirmations").empty();
                    requests.forEach(r => {
                        $("#add-confirmations").append(`<li class="request-list-item" id="${r.Id}">${r.Name}</li>`);
                    });
                    document.querySelectorAll('.request-list-item').forEach(e => e.addEventListener('click', confirmContactRequest));
                }

                chat.client.contactRequestAdded = function(contactName, success) {
                    if (!success) alert("Не удалось отправить запрос на добавление пользователю " + contactName + ". Такой пользователь не существует либо он уже добавлен в список контактов");
                    else {
                        alert("Запрос на добавление в список контактов успешно отправлен пользователю " + contactName);

                        chat.server.queryUserRequests(currentUserId);
                    }
                }

                chat.client.contactRequestFulfilled = function() {
                    chat.server.queryUserContacts(currentUserId);
                    chat.server.queryUserRequests(currentUserId);
                }


                // Get the user name and store it to prepend to messages.
                $('#displayname').val("displayname");
                // Set initial focus to message input box.
                $('#message').focus();
                // Start the connection.
                $.connection.hub.start().done(function() {
                    $('#sendmessage').click(sendMessage);

                    document.querySelector('#message').addEventListener('keypress',
                        function(e) {
                            if (e.key === 'Enter') {
                                sendMessage();
                            }
                        });

                    chat.server.queryUserContacts(currentUserId);
                    chat.server.queryUserRequests(currentUserId);
                });

                function sendMessage() {
                    // Call the Send method on the hub.
                    chat.server.send(currentUserId, currentContactId, $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                }

                $('#add-contact').click(function() {
                    let userName = prompt("Введите имя пользователя");
                    if (userName === null) return;
                    chat.server.addContactRequest(currentUserId, userName);
                })

                // This optional function html-encodes messages for display in the page.
                function htmlEncode(value) {
                    var encodedValue = $('<div />').text(value).html();
                    return encodedValue;
                }


                function changeCurrentContact(e) {
                    currentContactId = e.target.id;
                    if (currentContactId)
                        chat.server.queryMessages(currentUserId, currentContactId);
                }

                function confirmContactRequest(e) {
                    var requestId = e.target.id;
                    var confirmation = confirm("Добавить пользователя в список контактов?");
                    if (confirmation)
                        chat.server.confirmContactRequest(currentUserId, requestId);
                    else
                        chat.server.rejectContactRequest(currentUserId, requestId);
                }
                

            });
        </script>
    }
